<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/12/08/ce-shi/"/>
      <url>/2018/12/08/ce-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="http://localhost:3000/tz (5" alt="tz 5.jpg">.jpg)</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>windows通过虚拟机使用docker</title>
      <link href="/2018/12/08/hello-world/"/>
      <url>/2018/12/08/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="1、centos-yum安装docker"><a href="#1、centos-yum安装docker" class="headerlink" title="1、centos yum安装docker"></a>1、centos yum安装docker</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker \  docker-common \  docker-selinux \  docker-engine</code></pre><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils \   device-mapper-persistent-data \   lvm2</code></pre><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#国内源</span>$ <span class="token function">sudo</span> yum-config-manager \--add-repo \https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo<span class="token comment" spellcheck="true"># 官方源</span><span class="token comment" spellcheck="true"># $ sudo yum-config-manager \</span><span class="token comment" spellcheck="true"># --add-repo \</span><span class="token comment" spellcheck="true"># https://download.docker.com/linux/centos/docker-ce.repo</span></code></pre><h4 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装最新版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-edge<span class="token comment" spellcheck="true">#安装测试版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-test<span class="token comment" spellcheck="true">#正式安装</span>$ <span class="token function">sudo</span> yum makecache fast$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="2、脚本自动安装"><a href="#2、脚本自动安装" class="headerlink" title="2、脚本自动安装"></a>2、脚本自动安装</h2><pre class=" language-bash"><code class="language-bash">$ curl -fsSL get.docker.com -o get-docker.sh$ <span class="token function">sudo</span> sh get-docker.sh --mirror Aliyun</code></pre><h2 id="3、镜像加速"><a href="#3、镜像加速" class="headerlink" title="3、镜像加速"></a>3、镜像加速</h2><p>方式有很多，这里使用的是163镜像(这个效果好像没有daocloud加速器好)</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/docker/daemon.json<span class="token comment" spellcheck="true">#添加</span><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"http://hub-mirror.c.163.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#保存重启docker</span>$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="4、docker-compose-安装"><a href="#4、docker-compose-安装" class="headerlink" title="4、docker-compose 安装"></a>4、docker-compose 安装</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>至此，docker安装工作已经完成，因为最终目的是让虚拟机作为一个工作环境，而代码编写、调试在windows上，所以我们需要虚拟机和windows文件共享，同步更新，这样一个完整的工作流程就ok了<br>接下来，实现虚拟机文件共享</p><h2 id="在-Linux-虚拟机中手动安装-VMware-Tools"><a href="#在-Linux-虚拟机中手动安装-VMware-Tools" class="headerlink" title="在 Linux 虚拟机中手动安装 VMware Tools"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">在 Linux 虚拟机中手动安装 VMware Tools</a></h2><p>在主机上，从 Workstation Pro 菜单栏中选择虚拟机 &gt; 安装 VMware Tools。<br>如果安装了早期版本的 VMware Tools，则菜单项是更新 VMware Tools。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#如果未装载 VMware Tools 虚拟 CD-ROM 映像，请装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#如果装载点目录尚不存在，请创建该目录。</span>$ <span class="token function">mkdir</span> /mnt/cdrom<span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的装载点名称。例如，某些发行版上的装载点是 /media/VMware Tools 而不是 #/mnt/cdrom。请修改该命令以反映您的发行版使用的约定。</span><span class="token comment" spellcheck="true">#装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的设备名称，或者以不同的方式组织 /dev 目录。如果 CD-ROM 驱动器不是 #/dev/cdrom 或 CD-ROM 装载点不是 /mnt/cdrom，则必须修改该命令以反映您的发行版使用的约定。</span>$ <span class="token function">mount</span> /dev/cdrom /mnt/cdrom<span class="token comment" spellcheck="true">#（可选）在安装 VMware Tools 之前，删除以前的 vmware-tools-distrib 目录。</span><span class="token comment" spellcheck="true">#该目录的位置取决于以前安装时的存储位置。通常，该目录位于 /tmp/vmware-tools-distrib。</span><span class="token comment" spellcheck="true">#列出挂载点目录的内容，并记下 VMware Tools tar 安装程序的文件名。</span>$ <span class="token function">ls</span> mount-point<span class="token comment" spellcheck="true">#解压缩安装程序。</span>$ <span class="token function">tar</span> zxpf /mnt/cdrom/VMwareTools-x.x.x-yyyy.tar.gz -C /tmp/  <span class="token comment" spellcheck="true">#x.x.x 值是产品版本号，yyyy 是产品版本的内部版本号。</span><span class="token comment" spellcheck="true"># 如果需要，请卸载 CD-ROM 映像。</span>$ <span class="token function">umount</span> /dev/cdrom <span class="token comment" spellcheck="true">#如果 Linux 发行版自动装载 CD-ROM，则不需要卸载该映像。</span><span class="token comment" spellcheck="true">#运行安装程序并以 root 用户身份配置 VMware Tools。</span>$ <span class="token function">cd</span> /tmp/vmware-tools-distrib$ <span class="token function">sudo</span> ./vmware-install.pl</code></pre><p>接下来就是根据提示键y/n</p><h2 id="在-Linux-客户机中装载共享文件夹"><a href="#在-Linux-客户机中装载共享文件夹" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-D6D9A5FD-7F5F-4C95-AFAB-EDE9335F5562.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><p><img src="http://localhost:3000/images/screenshot.png" alt=""></p><h2 id="在-Linux-客户机中装载共享文件夹-1"><a href="#在-Linux-客户机中装载共享文件夹-1" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前虚拟机设置共享的文件夹</span>$ vmware-hgfsclient  //根据上图配置的共享文件夹，这条命令会显示docker$ <span class="token function">mount</span> -t vmhgfs .host:/docker /mnt/hgfs  //docker换成你vmware-hgfsclient执行结果<span class="token comment" spellcheck="true">#如果报错Error: cannot mount filesystem: No such device 执行：</span>$ <span class="token function">sudo</span> vmhgfs-fuse .host:/docker /mnt/hgfs 即可（有时候这个报错并不影响共享，查看/mnt/hgfs目录已经有了共享文件夹）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows通过虚拟机使用docker</title>
      <link href="/2018/12/08/hello-world/"/>
      <url>/2018/12/08/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="1、centos-yum安装docker"><a href="#1、centos-yum安装docker" class="headerlink" title="1、centos yum安装docker"></a>1、centos yum安装docker</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker \  docker-common \  docker-selinux \  docker-engine</code></pre><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils \   device-mapper-persistent-data \   lvm2</code></pre><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#国内源</span>$ <span class="token function">sudo</span> yum-config-manager \--add-repo \https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo<span class="token comment" spellcheck="true"># 官方源</span><span class="token comment" spellcheck="true"># $ sudo yum-config-manager \</span><span class="token comment" spellcheck="true"># --add-repo \</span><span class="token comment" spellcheck="true"># https://download.docker.com/linux/centos/docker-ce.repo</span></code></pre><h4 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装最新版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-edge<span class="token comment" spellcheck="true">#安装测试版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-test<span class="token comment" spellcheck="true">#正式安装</span>$ <span class="token function">sudo</span> yum makecache fast$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="2、脚本自动安装"><a href="#2、脚本自动安装" class="headerlink" title="2、脚本自动安装"></a>2、脚本自动安装</h2><pre class=" language-bash"><code class="language-bash">$ curl -fsSL get.docker.com -o get-docker.sh$ <span class="token function">sudo</span> sh get-docker.sh --mirror Aliyun</code></pre><h2 id="3、镜像加速"><a href="#3、镜像加速" class="headerlink" title="3、镜像加速"></a>3、镜像加速</h2><p>方式有很多，这里使用的是163镜像(这个效果好像没有daocloud加速器好)</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/docker/daemon.json<span class="token comment" spellcheck="true">#添加</span><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"http://hub-mirror.c.163.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#保存重启docker</span>$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="4、docker-compose-安装"><a href="#4、docker-compose-安装" class="headerlink" title="4、docker-compose 安装"></a>4、docker-compose 安装</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>至此，docker安装工作已经完成，因为最终目的是让虚拟机作为一个工作环境，而代码编写、调试在windows上，所以我们需要虚拟机和windows文件共享，同步更新，这样一个完整的工作流程就ok了<br>接下来，实现虚拟机文件共享</p><h2 id="在-Linux-虚拟机中手动安装-VMware-Tools"><a href="#在-Linux-虚拟机中手动安装-VMware-Tools" class="headerlink" title="在 Linux 虚拟机中手动安装 VMware Tools"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">在 Linux 虚拟机中手动安装 VMware Tools</a></h2><p>在主机上，从 Workstation Pro 菜单栏中选择虚拟机 &gt; 安装 VMware Tools。<br>如果安装了早期版本的 VMware Tools，则菜单项是更新 VMware Tools。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#如果未装载 VMware Tools 虚拟 CD-ROM 映像，请装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#如果装载点目录尚不存在，请创建该目录。</span>$ <span class="token function">mkdir</span> /mnt/cdrom<span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的装载点名称。例如，某些发行版上的装载点是 /media/VMware Tools 而不是 #/mnt/cdrom。请修改该命令以反映您的发行版使用的约定。</span><span class="token comment" spellcheck="true">#装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的设备名称，或者以不同的方式组织 /dev 目录。如果 CD-ROM 驱动器不是 #/dev/cdrom 或 CD-ROM 装载点不是 /mnt/cdrom，则必须修改该命令以反映您的发行版使用的约定。</span>$ <span class="token function">mount</span> /dev/cdrom /mnt/cdrom<span class="token comment" spellcheck="true">#（可选）在安装 VMware Tools 之前，删除以前的 vmware-tools-distrib 目录。</span><span class="token comment" spellcheck="true">#该目录的位置取决于以前安装时的存储位置。通常，该目录位于 /tmp/vmware-tools-distrib。</span><span class="token comment" spellcheck="true">#列出挂载点目录的内容，并记下 VMware Tools tar 安装程序的文件名。</span>$ <span class="token function">ls</span> mount-point<span class="token comment" spellcheck="true">#解压缩安装程序。</span>$ <span class="token function">tar</span> zxpf /mnt/cdrom/VMwareTools-x.x.x-yyyy.tar.gz -C /tmp/  <span class="token comment" spellcheck="true">#x.x.x 值是产品版本号，yyyy 是产品版本的内部版本号。</span><span class="token comment" spellcheck="true"># 如果需要，请卸载 CD-ROM 映像。</span>$ <span class="token function">umount</span> /dev/cdrom <span class="token comment" spellcheck="true">#如果 Linux 发行版自动装载 CD-ROM，则不需要卸载该映像。</span><span class="token comment" spellcheck="true">#运行安装程序并以 root 用户身份配置 VMware Tools。</span>$ <span class="token function">cd</span> /tmp/vmware-tools-distrib$ <span class="token function">sudo</span> ./vmware-install.pl</code></pre><p>接下来就是根据提示键y/n</p><h2 id="在-Linux-客户机中装载共享文件夹"><a href="#在-Linux-客户机中装载共享文件夹" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-D6D9A5FD-7F5F-4C95-AFAB-EDE9335F5562.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><p><img src="http://localhost:3000/images/screenshot.png" alt=""></p><h2 id="在-Linux-客户机中装载共享文件夹-1"><a href="#在-Linux-客户机中装载共享文件夹-1" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前虚拟机设置共享的文件夹</span>$ vmware-hgfsclient  //根据上图配置的共享文件夹，这条命令会显示docker$ <span class="token function">mount</span> -t vmhgfs .host:/docker /mnt/hgfs  //docker换成你vmware-hgfsclient执行结果<span class="token comment" spellcheck="true">#如果报错Error: cannot mount filesystem: No such device 执行：</span>$ <span class="token function">sudo</span> vmhgfs-fuse .host:/docker /mnt/hgfs 即可（有时候这个报错并不影响共享，查看/mnt/hgfs目录已经有了共享文件夹）</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows通过虚拟机使用docker</title>
      <link href="/2018/11/16/helloworld/"/>
      <url>/2018/11/16/helloworld/</url>
      
        <content type="html"><![CDATA[<h2 id="1、centos-yum安装docker"><a href="#1、centos-yum安装docker" class="headerlink" title="1、centos yum安装docker"></a>1、centos yum安装docker</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker \  docker-common \  docker-selinux \  docker-engine</code></pre><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils \   device-mapper-persistent-data \   lvm2</code></pre><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#国内源</span>$ <span class="token function">sudo</span> yum-config-manager \--add-repo \https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo<span class="token comment" spellcheck="true"># 官方源</span><span class="token comment" spellcheck="true"># $ sudo yum-config-manager \</span><span class="token comment" spellcheck="true"># --add-repo \</span><span class="token comment" spellcheck="true"># https://download.docker.com/linux/centos/docker-ce.repo</span></code></pre><h4 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装最新版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-edge<span class="token comment" spellcheck="true">#安装测试版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-test<span class="token comment" spellcheck="true">#正式安装</span>$ <span class="token function">sudo</span> yum makecache fast$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="2、脚本自动安装"><a href="#2、脚本自动安装" class="headerlink" title="2、脚本自动安装"></a>2、脚本自动安装</h2><pre class=" language-bash"><code class="language-bash">$ curl -fsSL get.docker.com -o get-docker.sh$ <span class="token function">sudo</span> sh get-docker.sh --mirror Aliyun</code></pre><h2 id="3、镜像加速"><a href="#3、镜像加速" class="headerlink" title="3、镜像加速"></a>3、镜像加速</h2><p>方式有很多，这里使用的是163镜像(这个效果好像没有daocloud加速器好)</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/docker/daemon.json<span class="token comment" spellcheck="true">#添加</span><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"http://hub-mirror.c.163.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#保存重启docker</span>$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="4、docker-compose-安装"><a href="#4、docker-compose-安装" class="headerlink" title="4、docker-compose 安装"></a>4、docker-compose 安装</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>至此，docker安装工作已经完成，因为最终目的是让虚拟机作为一个工作环境，而代码编写、调试在windows上，所以我们需要虚拟机和windows文件共享，同步更新，这样一个完整的工作流程就ok了<br>接下来，实现虚拟机文件共享</p><h2 id="在-Linux-虚拟机中手动安装-VMware-Tools"><a href="#在-Linux-虚拟机中手动安装-VMware-Tools" class="headerlink" title="在 Linux 虚拟机中手动安装 VMware Tools"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">在 Linux 虚拟机中手动安装 VMware Tools</a></h2><p>在主机上，从 Workstation Pro 菜单栏中选择虚拟机 &gt; 安装 VMware Tools。<br>如果安装了早期版本的 VMware Tools，则菜单项是更新 VMware Tools。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#如果未装载 VMware Tools 虚拟 CD-ROM 映像，请装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#如果装载点目录尚不存在，请创建该目录。</span>$ <span class="token function">mkdir</span> /mnt/cdrom<span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的装载点名称。例如，某些发行版上的装载点是 /media/VMware Tools 而不是 #/mnt/cdrom。请修改该命令以反映您的发行版使用的约定。</span><span class="token comment" spellcheck="true">#装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的设备名称，或者以不同的方式组织 /dev 目录。如果 CD-ROM 驱动器不是 #/dev/cdrom 或 CD-ROM 装载点不是 /mnt/cdrom，则必须修改该命令以反映您的发行版使用的约定。</span>$ <span class="token function">mount</span> /dev/cdrom /mnt/cdrom<span class="token comment" spellcheck="true">#（可选）在安装 VMware Tools 之前，删除以前的 vmware-tools-distrib 目录。</span><span class="token comment" spellcheck="true">#该目录的位置取决于以前安装时的存储位置。通常，该目录位于 /tmp/vmware-tools-distrib。</span><span class="token comment" spellcheck="true">#列出挂载点目录的内容，并记下 VMware Tools tar 安装程序的文件名。</span>$ <span class="token function">ls</span> mount-point<span class="token comment" spellcheck="true">#解压缩安装程序。</span>$ <span class="token function">tar</span> zxpf /mnt/cdrom/VMwareTools-x.x.x-yyyy.tar.gz -C /tmp/  <span class="token comment" spellcheck="true">#x.x.x 值是产品版本号，yyyy 是产品版本的内部版本号。</span><span class="token comment" spellcheck="true"># 如果需要，请卸载 CD-ROM 映像。</span>$ <span class="token function">umount</span> /dev/cdrom <span class="token comment" spellcheck="true">#如果 Linux 发行版自动装载 CD-ROM，则不需要卸载该映像。</span><span class="token comment" spellcheck="true">#运行安装程序并以 root 用户身份配置 VMware Tools。</span>$ <span class="token function">cd</span> /tmp/vmware-tools-distrib$ <span class="token function">sudo</span> ./vmware-install.pl</code></pre><p>接下来就是根据提示键y/n</p><h2 id="在-Linux-客户机中装载共享文件夹"><a href="#在-Linux-客户机中装载共享文件夹" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-D6D9A5FD-7F5F-4C95-AFAB-EDE9335F5562.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><p><img src="/images/screenshot.png" alt=""></p><h2 id="在-Linux-客户机中装载共享文件夹-1"><a href="#在-Linux-客户机中装载共享文件夹-1" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前虚拟机设置共享的文件夹</span>$ vmware-hgfsclient  //根据上图配置的共享文件夹，这条命令会显示docker$ <span class="token function">mount</span> -t vmhgfs .host:/docker /mnt/hgfs  //docker换成你vmware-hgfsclient执行结果<span class="token comment" spellcheck="true">#如果报错Error: cannot mount filesystem: No such device 执行：</span>$ <span class="token function">sudo</span> vmhgfs-fuse .host:/docker /mnt/hgfs 即可（有时候这个报错并不影响共享，查看/mnt/hgfs目录已经有了共享文件夹）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows通过虚拟机使用docker</title>
      <link href="/2018/11/16/hello-world/"/>
      <url>/2018/11/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="1、centos-yum安装docker"><a href="#1、centos-yum安装docker" class="headerlink" title="1、centos yum安装docker"></a>1、centos yum安装docker</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker \  docker-common \  docker-selinux \  docker-engine</code></pre><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils \   device-mapper-persistent-data \   lvm2</code></pre><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#国内源</span>$ <span class="token function">sudo</span> yum-config-manager \--add-repo \https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo<span class="token comment" spellcheck="true"># 官方源</span><span class="token comment" spellcheck="true"># $ sudo yum-config-manager \</span><span class="token comment" spellcheck="true"># --add-repo \</span><span class="token comment" spellcheck="true"># https://download.docker.com/linux/centos/docker-ce.repo</span></code></pre><h4 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装最新版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-edge<span class="token comment" spellcheck="true">#安装测试版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-test<span class="token comment" spellcheck="true">#正式安装</span>$ <span class="token function">sudo</span> yum makecache fast$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="2、脚本自动安装"><a href="#2、脚本自动安装" class="headerlink" title="2、脚本自动安装"></a>2、脚本自动安装</h2><pre class=" language-bash"><code class="language-bash">$ curl -fsSL get.docker.com -o get-docker.sh$ <span class="token function">sudo</span> sh get-docker.sh --mirror Aliyun</code></pre><h2 id="3、镜像加速"><a href="#3、镜像加速" class="headerlink" title="3、镜像加速"></a>3、镜像加速</h2><p>方式有很多，这里使用的是163镜像(这个效果好像没有daocloud加速器好)</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/docker/daemon.json<span class="token comment" spellcheck="true">#添加</span><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"http://hub-mirror.c.163.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#保存重启docker</span>$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="4、docker-compose-安装"><a href="#4、docker-compose-安装" class="headerlink" title="4、docker-compose 安装"></a>4、docker-compose 安装</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>至此，docker安装工作已经完成，因为最终目的是让虚拟机作为一个工作环境，而代码编写、调试在windows上，所以我们需要虚拟机和windows文件共享，同步更新，这样一个完整的工作流程就ok了<br>接下来，实现虚拟机文件共享</p><h2 id="在-Linux-虚拟机中手动安装-VMware-Tools"><a href="#在-Linux-虚拟机中手动安装-VMware-Tools" class="headerlink" title="在 Linux 虚拟机中手动安装 VMware Tools"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">在 Linux 虚拟机中手动安装 VMware Tools</a></h2><p>在主机上，从 Workstation Pro 菜单栏中选择虚拟机 &gt; 安装 VMware Tools。<br>如果安装了早期版本的 VMware Tools，则菜单项是更新 VMware Tools。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#如果未装载 VMware Tools 虚拟 CD-ROM 映像，请装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#如果装载点目录尚不存在，请创建该目录。</span>$ <span class="token function">mkdir</span> /mnt/cdrom<span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的装载点名称。例如，某些发行版上的装载点是 /media/VMware Tools 而不是 #/mnt/cdrom。请修改该命令以反映您的发行版使用的约定。</span><span class="token comment" spellcheck="true">#装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的设备名称，或者以不同的方式组织 /dev 目录。如果 CD-ROM 驱动器不是 #/dev/cdrom 或 CD-ROM 装载点不是 /mnt/cdrom，则必须修改该命令以反映您的发行版使用的约定。</span>$ <span class="token function">mount</span> /dev/cdrom /mnt/cdrom<span class="token comment" spellcheck="true">#（可选）在安装 VMware Tools 之前，删除以前的 vmware-tools-distrib 目录。</span><span class="token comment" spellcheck="true">#该目录的位置取决于以前安装时的存储位置。通常，该目录位于 /tmp/vmware-tools-distrib。</span><span class="token comment" spellcheck="true">#列出挂载点目录的内容，并记下 VMware Tools tar 安装程序的文件名。</span>$ <span class="token function">ls</span> mount-point<span class="token comment" spellcheck="true">#解压缩安装程序。</span>$ <span class="token function">tar</span> zxpf /mnt/cdrom/VMwareTools-x.x.x-yyyy.tar.gz -C /tmp/  <span class="token comment" spellcheck="true">#x.x.x 值是产品版本号，yyyy 是产品版本的内部版本号。</span><span class="token comment" spellcheck="true"># 如果需要，请卸载 CD-ROM 映像。</span>$ <span class="token function">umount</span> /dev/cdrom <span class="token comment" spellcheck="true">#如果 Linux 发行版自动装载 CD-ROM，则不需要卸载该映像。</span><span class="token comment" spellcheck="true">#运行安装程序并以 root 用户身份配置 VMware Tools。</span>$ <span class="token function">cd</span> /tmp/vmware-tools-distrib$ <span class="token function">sudo</span> ./vmware-install.pl</code></pre><p>接下来就是根据提示键y/n</p><h2 id="在-Linux-客户机中装载共享文件夹"><a href="#在-Linux-客户机中装载共享文件夹" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-D6D9A5FD-7F5F-4C95-AFAB-EDE9335F5562.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><p><img src="/images/screenshot.png" alt=""></p><h2 id="在-Linux-客户机中装载共享文件夹-1"><a href="#在-Linux-客户机中装载共享文件夹-1" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前虚拟机设置共享的文件夹</span>$ vmware-hgfsclient  //根据上图配置的共享文件夹，这条命令会显示docker$ <span class="token function">mount</span> -t vmhgfs .host:/docker /mnt/hgfs  //docker换成你vmware-hgfsclient执行结果<span class="token comment" spellcheck="true">#如果报错Error: cannot mount filesystem: No such device 执行：</span>$ <span class="token function">sudo</span> vmhgfs-fuse .host:/docker /mnt/hgfs 即可（有时候这个报错并不影响共享，查看/mnt/hgfs目录已经有了共享文件夹）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 主从同步 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows通过虚拟机使用docker</title>
      <link href="/2018/11/16/hello-world/"/>
      <url>/2018/11/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="1、centos-yum安装docker"><a href="#1、centos-yum安装docker" class="headerlink" title="1、centos yum安装docker"></a>1、centos yum安装docker</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker \  docker-common \  docker-selinux \  docker-engine</code></pre><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils \   device-mapper-persistent-data \   lvm2</code></pre><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#国内源</span>$ <span class="token function">sudo</span> yum-config-manager \--add-repo \https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo<span class="token comment" spellcheck="true"># 官方源</span><span class="token comment" spellcheck="true"># $ sudo yum-config-manager \</span><span class="token comment" spellcheck="true"># --add-repo \</span><span class="token comment" spellcheck="true"># https://download.docker.com/linux/centos/docker-ce.repo</span></code></pre><h4 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装最新版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-edge<span class="token comment" spellcheck="true">#安装测试版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-test<span class="token comment" spellcheck="true">#正式安装</span>$ <span class="token function">sudo</span> yum makecache fast$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="2、脚本自动安装"><a href="#2、脚本自动安装" class="headerlink" title="2、脚本自动安装"></a>2、脚本自动安装</h2><pre class=" language-bash"><code class="language-bash">$ curl -fsSL get.docker.com -o get-docker.sh$ <span class="token function">sudo</span> sh get-docker.sh --mirror Aliyun</code></pre><h2 id="3、镜像加速"><a href="#3、镜像加速" class="headerlink" title="3、镜像加速"></a>3、镜像加速</h2><p>方式有很多，这里使用的是163镜像(这个效果好像没有daocloud加速器好)</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/docker/daemon.json<span class="token comment" spellcheck="true">#添加</span><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"http://hub-mirror.c.163.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#保存重启docker</span>$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="4、docker-compose-安装"><a href="#4、docker-compose-安装" class="headerlink" title="4、docker-compose 安装"></a>4、docker-compose 安装</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>至此，docker安装工作已经完成，因为最终目的是让虚拟机作为一个工作环境，而代码编写、调试在windows上，所以我们需要虚拟机和windows文件共享，同步更新，这样一个完整的工作流程就ok了<br>接下来，实现虚拟机文件共享</p><h2 id="在-Linux-虚拟机中手动安装-VMware-Tools"><a href="#在-Linux-虚拟机中手动安装-VMware-Tools" class="headerlink" title="在 Linux 虚拟机中手动安装 VMware Tools"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">在 Linux 虚拟机中手动安装 VMware Tools</a></h2><p>在主机上，从 Workstation Pro 菜单栏中选择虚拟机 &gt; 安装 VMware Tools。<br>如果安装了早期版本的 VMware Tools，则菜单项是更新 VMware Tools。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#如果未装载 VMware Tools 虚拟 CD-ROM 映像，请装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#如果装载点目录尚不存在，请创建该目录。</span>$ <span class="token function">mkdir</span> /mnt/cdrom<span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的装载点名称。例如，某些发行版上的装载点是 /media/VMware Tools 而不是 #/mnt/cdrom。请修改该命令以反映您的发行版使用的约定。</span><span class="token comment" spellcheck="true">#装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的设备名称，或者以不同的方式组织 /dev 目录。如果 CD-ROM 驱动器不是 #/dev/cdrom 或 CD-ROM 装载点不是 /mnt/cdrom，则必须修改该命令以反映您的发行版使用的约定。</span>$ <span class="token function">mount</span> /dev/cdrom /mnt/cdrom<span class="token comment" spellcheck="true">#（可选）在安装 VMware Tools 之前，删除以前的 vmware-tools-distrib 目录。</span><span class="token comment" spellcheck="true">#该目录的位置取决于以前安装时的存储位置。通常，该目录位于 /tmp/vmware-tools-distrib。</span><span class="token comment" spellcheck="true">#列出挂载点目录的内容，并记下 VMware Tools tar 安装程序的文件名。</span>$ <span class="token function">ls</span> mount-point<span class="token comment" spellcheck="true">#解压缩安装程序。</span>$ <span class="token function">tar</span> zxpf /mnt/cdrom/VMwareTools-x.x.x-yyyy.tar.gz -C /tmp/  <span class="token comment" spellcheck="true">#x.x.x 值是产品版本号，yyyy 是产品版本的内部版本号。</span><span class="token comment" spellcheck="true"># 如果需要，请卸载 CD-ROM 映像。</span>$ <span class="token function">umount</span> /dev/cdrom <span class="token comment" spellcheck="true">#如果 Linux 发行版自动装载 CD-ROM，则不需要卸载该映像。</span><span class="token comment" spellcheck="true">#运行安装程序并以 root 用户身份配置 VMware Tools。</span>$ <span class="token function">cd</span> /tmp/vmware-tools-distrib$ <span class="token function">sudo</span> ./vmware-install.pl</code></pre><p>接下来就是根据提示键y/n</p><h2 id="在-Linux-客户机中装载共享文件夹"><a href="#在-Linux-客户机中装载共享文件夹" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-D6D9A5FD-7F5F-4C95-AFAB-EDE9335F5562.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><p><img src="/images/screenshot.png" alt=""></p><h2 id="在-Linux-客户机中装载共享文件夹-1"><a href="#在-Linux-客户机中装载共享文件夹-1" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前虚拟机设置共享的文件夹</span>$ vmware-hgfsclient  //根据上图配置的共享文件夹，这条命令会显示docker$ <span class="token function">mount</span> -t vmhgfs .host:/docker /mnt/hgfs  //docker换成你vmware-hgfsclient执行结果<span class="token comment" spellcheck="true">#如果报错Error: cannot mount filesystem: No such device 执行：</span>$ <span class="token function">sudo</span> vmhgfs-fuse .host:/docker /mnt/hgfs 即可（有时候这个报错并不影响共享，查看/mnt/hgfs目录已经有了共享文件夹）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows通过虚拟机使用docker</title>
      <link href="/2018/11/16/hello-world/"/>
      <url>/2018/11/16/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="1、centos-yum安装docker"><a href="#1、centos-yum安装docker" class="headerlink" title="1、centos yum安装docker"></a>1、centos yum安装docker</h2><h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum remove docker \  docker-common \  docker-selinux \  docker-engine</code></pre><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils \   device-mapper-persistent-data \   lvm2</code></pre><h4 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#国内源</span>$ <span class="token function">sudo</span> yum-config-manager \--add-repo \https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo<span class="token comment" spellcheck="true"># 官方源</span><span class="token comment" spellcheck="true"># $ sudo yum-config-manager \</span><span class="token comment" spellcheck="true"># --add-repo \</span><span class="token comment" spellcheck="true"># https://download.docker.com/linux/centos/docker-ce.repo</span></code></pre><h4 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装最新版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-edge<span class="token comment" spellcheck="true">#安装测试版本的 Docker CE</span>$ <span class="token function">sudo</span> yum-config-manager --enable docker-ce-test<span class="token comment" spellcheck="true">#正式安装</span>$ <span class="token function">sudo</span> yum makecache fast$ <span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce</code></pre><h2 id="2、脚本自动安装"><a href="#2、脚本自动安装" class="headerlink" title="2、脚本自动安装"></a>2、脚本自动安装</h2><pre class=" language-bash"><code class="language-bash">$ curl -fsSL get.docker.com -o get-docker.sh$ <span class="token function">sudo</span> sh get-docker.sh --mirror Aliyun</code></pre><h2 id="3、镜像加速"><a href="#3、镜像加速" class="headerlink" title="3、镜像加速"></a>3、镜像加速</h2><p>方式有很多，这里使用的是163镜像(这个效果好像没有daocloud加速器好)</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/docker/daemon.json<span class="token comment" spellcheck="true">#添加</span><span class="token punctuation">{</span>    <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"http://hub-mirror.c.163.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#保存重启docker</span>$ <span class="token function">sudo</span> systemctl daemon-reload$ <span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="4、docker-compose-安装"><a href="#4、docker-compose-安装" class="headerlink" title="4、docker-compose 安装"></a>4、docker-compose 安装</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> <span class="token operator">></span> /usr/local/bin/docker-compose$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>至此，docker安装工作已经完成，因为最终目的是让虚拟机作为一个工作环境，而代码编写、调试在windows上，所以我们需要虚拟机和windows文件共享，同步更新，这样一个完整的工作流程就ok了<br>接下来，实现虚拟机文件共享</p><h2 id="在-Linux-虚拟机中手动安装-VMware-Tools"><a href="#在-Linux-虚拟机中手动安装-VMware-Tools" class="headerlink" title="在 Linux 虚拟机中手动安装 VMware Tools"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-08BB9465-D40A-4E16-9E15-8C016CC8166F.html" target="_blank" rel="noopener">在 Linux 虚拟机中手动安装 VMware Tools</a></h2><p>在主机上，从 Workstation Pro 菜单栏中选择虚拟机 &gt; 安装 VMware Tools。<br>如果安装了早期版本的 VMware Tools，则菜单项是更新 VMware Tools。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#如果未装载 VMware Tools 虚拟 CD-ROM 映像，请装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#如果装载点目录尚不存在，请创建该目录。</span>$ <span class="token function">mkdir</span> /mnt/cdrom<span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的装载点名称。例如，某些发行版上的装载点是 /media/VMware Tools 而不是 #/mnt/cdrom。请修改该命令以反映您的发行版使用的约定。</span><span class="token comment" spellcheck="true">#装载 CD-ROM 驱动器。</span><span class="token comment" spellcheck="true">#某些 Linux 发行版使用不同的设备名称，或者以不同的方式组织 /dev 目录。如果 CD-ROM 驱动器不是 #/dev/cdrom 或 CD-ROM 装载点不是 /mnt/cdrom，则必须修改该命令以反映您的发行版使用的约定。</span>$ <span class="token function">mount</span> /dev/cdrom /mnt/cdrom<span class="token comment" spellcheck="true">#（可选）在安装 VMware Tools 之前，删除以前的 vmware-tools-distrib 目录。</span><span class="token comment" spellcheck="true">#该目录的位置取决于以前安装时的存储位置。通常，该目录位于 /tmp/vmware-tools-distrib。</span><span class="token comment" spellcheck="true">#列出挂载点目录的内容，并记下 VMware Tools tar 安装程序的文件名。</span>$ <span class="token function">ls</span> mount-point<span class="token comment" spellcheck="true">#解压缩安装程序。</span>$ <span class="token function">tar</span> zxpf /mnt/cdrom/VMwareTools-x.x.x-yyyy.tar.gz -C /tmp/  <span class="token comment" spellcheck="true">#x.x.x 值是产品版本号，yyyy 是产品版本的内部版本号。</span><span class="token comment" spellcheck="true"># 如果需要，请卸载 CD-ROM 映像。</span>$ <span class="token function">umount</span> /dev/cdrom <span class="token comment" spellcheck="true">#如果 Linux 发行版自动装载 CD-ROM，则不需要卸载该映像。</span><span class="token comment" spellcheck="true">#运行安装程序并以 root 用户身份配置 VMware Tools。</span>$ <span class="token function">cd</span> /tmp/vmware-tools-distrib$ <span class="token function">sudo</span> ./vmware-install.pl</code></pre><p>接下来就是根据提示键y/n</p><h2 id="在-Linux-客户机中装载共享文件夹"><a href="#在-Linux-客户机中装载共享文件夹" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-D6D9A5FD-7F5F-4C95-AFAB-EDE9335F5562.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><p><img src="/images/screenshot.png" alt=""></p><h2 id="在-Linux-客户机中装载共享文件夹-1"><a href="#在-Linux-客户机中装载共享文件夹-1" class="headerlink" title="在 Linux 客户机中装载共享文件夹"></a><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/14.0/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html" target="_blank" rel="noopener">在 Linux 客户机中装载共享文件夹</a></h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看当前虚拟机设置共享的文件夹</span>$ vmware-hgfsclient  //根据上图配置的共享文件夹，这条命令会显示docker$ <span class="token function">mount</span> -t vmhgfs .host:/docker /mnt/hgfs  //docker换成你vmware-hgfsclient执行结果<span class="token comment" spellcheck="true">#如果报错Error: cannot mount filesystem: No such device 执行：</span>$ <span class="token function">sudo</span> vmhgfs-fuse .host:/docker /mnt/hgfs 即可（有时候这个报错并不影响共享，查看/mnt/hgfs目录已经有了共享文件夹）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
